{"remainingRequest":"/Users/justinwu/Desktop/Gitlab_MyTale/mytale/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/justinwu/Desktop/Gitlab_MyTale/mytale/src/components/editor/tools/media/Sidebar_Media.vue?vue&type=style&index=0&id=148ff1d0&scoped=true&lang=css&","dependencies":[{"path":"/Users/justinwu/Desktop/Gitlab_MyTale/mytale/src/components/editor/tools/media/Sidebar_Media.vue","mtime":1604692362838},{"path":"/Users/justinwu/Desktop/Gitlab_MyTale/mytale/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/justinwu/Desktop/Gitlab_MyTale/mytale/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/justinwu/Desktop/Gitlab_MyTale/mytale/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/justinwu/Desktop/Gitlab_MyTale/mytale/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/justinwu/Desktop/Gitlab_MyTale/mytale/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/justinwu/Desktop/Gitlab_MyTale/mytale/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgojbWVkaWFfc2lkZWJhciB7CiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICBwYWRkaW5nOiA1cHg7Cn0KCmlucHV0W3R5cGU9ImZpbGUiXSB7CiAgICBkaXNwbGF5OiBub25lOwp9Cgojc3BhY2VyIHsKICAgIGRpc3BsYXk6IGZsZXg7CiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOwogICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7Cn0KCi5saXN0IHsKICAgIHBhZGRpbmc6IDEwcHg7Cn0K"},{"version":3,"sources":["Sidebar_Media.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqMA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"Sidebar_Media.vue","sourceRoot":"src/components/editor/tools/media","sourcesContent":["<template>\n    <div id = \"media_sidebar\">\n        <div id = \"header\" style = \"display:grid; grid-template-columns: 10fr 1fr; text-align:center;\">\n            <h3 style = \"padding-top: 5px;\">Media Variables</h3>\n            <v-btn icon id = \"hide\" v-on:click = \"emitDispVars\"><v-icon>{{this.hidden ? 'mdi-eye':'mdi-eye-off'}}</v-icon></v-btn>\n        </div><br>\n\n        <div v-if = \"this.status != ''\"><p>{{this.status}}</p></div>\n        \n        <div id = \"spacer\">\n            <upload-list class = \"list\" purpose = \"Images\" :varMap = \"this.imageVars\"\n                        v-on:evtReplaceFile = \"replaceImage\"\n                        v-on:evtNewMediaVariables = \"emitNewImageVariable\" \n                        v-on:evtNewVarName = \"emitImageVarNameChange\"\n                        v-on:evtAdd = \"emitAddImageToPage\"\n                        v-on:evtDelete = \"emitRemoveImage\"></upload-list><br> \n\n            <upload-list class = \"list\" purpose = \"Audio\" :varMap = \"this.audioVars\"\n                        v-on:evtReplaceFile = \"replaceAudio\" \n                        v-on:evtNewMediaVariables = \"emitNewAudioVariable\" \n                        v-on:evtNewVarName = \"emitAudioVarNameChange\"\n                        v-on:evtAdd = \"emitAddAudioToPage\"\n                        v-on:evtDelete = \"emitRemoveAudio\"></upload-list> \n        </div>\n    </div>\n</template>\n\n<script>\nimport Upload_List from './Upload_List.vue'\n\nexport default {\n    name: 'media-sidebar',\n\n    components: {\n        'upload-list': Upload_List,\n    },\n\n    props: {\n        status: String,\n        imageVars: Map,\n        audioVars: Map\n    },\n\n    data() {\n        return {\n            hidden: true,\n        }\n    },\n\n    created: function() {\n    },\n\n    methods: {\n        // event: {files, names}\n        processImages: function(event) {\n            var files = event.files;\n            var data = event.data;\n\n            for(var i = 0; i < files.length; i++) {\n                var f = files[i];\n\n                var blob = new Blob([f], { type: f.type});\n                var src = URL.createObjectURL(blob);\n                var t = 'image';\n                \n                var mediaName = '';\n                for(var j = 0; j < data.length; j++) {\n                    if(data[j].fileName == f.name) {\n                        mediaName = data[j].varName;\n                    }\n                }\n                \n                // file: File object\n                // fileName: name of file\n                // varName: variable name associated with file\n                // path: file url\n                // type: 'image'\n                // id: unique id generated before adding media to page\n                this.allImages.push({file: f, fileName: f.name, varName: mediaName, path: src, type: t, id: \"\", storeStatus: \"new\"});\n            }\n\n            this.allImages = this.allImages.filter(function(img) {\n                if(img.path != null) {\n                    return img;\n                }\n            });\n\n            this.$emit(\"evtImageUpdate\", this.allImages);\n        },\n\n        // event: {files, data}\n        processAudio: function(event) {\n            var files = event.files;\n            var data = event.data;\n\n            this.allAudio = [];\n\n            for(var i = 0; i < files.length; i++) {\n                var f = files[i];\n\n                var blob = new Blob([f], { type: f.type});\n                var src = URL.createObjectURL(blob);\n                var t = 'audio';\n                \n                var mediaName = '';\n                for(var j = 0; j < data.length; j++) {\n                    if(data[j].fileName == f.name) {\n                        mediaName = data[j].varName;\n                    }\n                }\n                \n                // fileName: name of file\n                // varName: variable name associated with file\n                // path: file url\n                // type: 'audio'\n                // id: unique id generated before adding media to page\n                this.allAudio.push({file: f, fileName: f.name, varName: mediaName, path: src, type: t, id: \"\"});\n            }\n            this.$emit(\"evtAudioUpdate\", this.allAudio);\n        },\n\n        // event: {prevName, newName}\n        emitAudioVarNameChange: function(event){\n            this.$emit(\"evtAudioNameChange\", event);\n        },\n\n        // event: {prevName, newName}\n        emitImageVarNameChange: function(event){\n            this.$emit(\"evtImageNameChange\", event);\n        },\n\n        // event: varArr = {name, file, fileName, path, color, id}\n        emitNewImageVariable: function(event){\n            this.$emit(\"evtNewImageVariable\", event);\n        },\n\n        // event: varArr = {name, file, fileName, path, color, id}\n        emitNewAudioVariable: function(event){\n            this.$emit(\"evtNewAudioVariable\", event);\n        },\n\n        // event: {name, data: {file, fileName, path}}\n        replaceImage(event){\n            this.$emit(\"evtReplaceImage\", event);\n        },\n\n        // event: {name, data: {file, fileName, path}}\n        replaceAudio(event){\n            this.$emit(\"evtReplaceAudio\", event);\n        },\n\n        // event: {name, fileName}\n        emitAddImageToPage: function(event) {\n            this.$emit(\"evtAddImage\", event);\n        },\n\n        // event: {name, fileName}\n        emitAddAudioToPage: function(event) {\n            this.$emit(\"evtAddAudio\", event);\n        },\n\n        // event: {name, fileName}\n        emitRemoveImage: function(event) {\n            this.$emit(\"evtRemoveImage\", event);\n\n            /* if(event.type == \"image\") {\n                this.allImages = this.allImages.filter(function(imageData) {\n                    if(imageData.fileName != event.fileName) {\n                        return imageData;\n                    }\n                });\n            }\n            if(event.type == \"audio\") {\n                this.allAudio = this.allAudio.filter(function(audioData) {\n                    if(audioData.fileName != event.fileName) {\n                        return audioData;\n                    }\n                });\n            } */\n            //this.allMedia = [];\n            //this.allMedia = this.allImages.concat(this.allAudio);\n        },\n\n        emitDispVars: function() {\n            this.hidden = !this.hidden;\n            this.$emit(\"evtDispVars\", {disp: this.hidden});\n        },\n\n        // event: {name, fileName}\n        emitRemoveAudio: function(event){\n            this.$emit(\"evtRemoveAudio\", event);\n        }\n    }\n}\n</script>\n\n<style scoped>\n#media_sidebar {\n    text-align: center;\n    padding: 5px;\n}\n\ninput[type=\"file\"] {\n    display: none;\n}\n\n#spacer {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n}\n\n.list {\n    padding: 10px;\n}\n</style>"]}]}