{"remainingRequest":"/Users/justinwu/Desktop/story_personalization_system/node_modules/babel-loader/lib/index.js!/Users/justinwu/Desktop/story_personalization_system/node_modules/eslint-loader/index.js??ref--13-0!/Users/justinwu/Desktop/story_personalization_system/src/js/extwee_utils/TweeParser.js","dependencies":[{"path":"/Users/justinwu/Desktop/story_personalization_system/src/js/extwee_utils/TweeParser.js","mtime":1604692362843},{"path":"/Users/justinwu/Desktop/story_personalization_system/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/justinwu/Desktop/story_personalization_system/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/justinwu/Desktop/story_personalization_system/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/justinwu/Desktop/story_personalization_system/src/js/extwee_utils/TweeParser.js"],"names":["Passage","require","Story","TweeParser","content","story","_passageMetadataError","_storydataError","parse","fileContents","length","Error","passages","adjusted","slice","indexOf","parsingPassages","split","pid","forEach","passage","tags","metadata","text","name","header","substring","trim","openingCurlyBracketPosition","lastIndexOf","closingCurlyBracketPosition","JSON","event","openingSquareBracketPosition","closingSquareBracketPosition","tagsArray","futureTagArray","tag","push","temp","filter","console","warn","pos","find","el","undefined","p","module","exports"],"mappings":"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","sourcesContent":["const Passage = require('./Passage.js');\nconst Story = require('./Story.js');\n/**\n * @class TweeParser\n * @module TweeParser\n */\nclass TweeParser {\n  /**\n   * @function TweeParser\n   * @class\n   * @param {string} content - Twee content to parse\n   */\n  constructor (content = '') {\n    this.story = new Story();\n    this._passageMetadataError = false;\n    this._storydataError = false;\n\n    this.parse(content);\n  }\n\n  /**\n   * Parse Twee\n   *\n   * @function parse\n   * @param {string} fileContents - File contents to parse\n   */\n  parse (fileContents) {\n    // Throw error if fileContents is empty\n    if (fileContents.length === 0) {\n      throw new Error('No file contents!');\n    }\n\n    let passages = [];\n    let adjusted = '';\n\n    // Check if there are extra content in the files\n    // If so, cut it all out for the parser\n    if (fileContents[0] !== ':' && fileContents[1] !== ':') {\n      adjusted = fileContents.slice(fileContents.indexOf('::'), fileContents.length);\n    } else {\n      adjusted = fileContents;\n    }\n\n    // Split the file based on the passage sigil (::) proceeded by a newline\n    const parsingPassages = adjusted.split('\\n::');\n\n    // Fix the first result\n    parsingPassages[0] = parsingPassages[0].slice(2, parsingPassages[0].length);\n\n    // Set the initial pid\n    let pid = 0;\n\n    // Iterate through the passages\n    parsingPassages.forEach((passage) => {\n      // Set default values\n      let tags = '';\n      let metadata = '';\n      let text = '';\n      let name = '';\n\n      // Header is everything to the first newline\n      let header = passage.slice(0, passage.indexOf('\\n'));\n      // Text is everything else\n      // (Also eat the leading newline character.)\n      // (And trim any remaining whitespace.)\n      text = passage.substring(header.length + 1, passage.length).trim();\n\n      // Test for metadata\n      const openingCurlyBracketPosition = header.lastIndexOf('{');\n      const closingCurlyBracketPosition = header.lastIndexOf('}');\n\n      if (openingCurlyBracketPosition !== -1 && closingCurlyBracketPosition !== -1) {\n        // Save the text metadata\n        metadata = header.slice(openingCurlyBracketPosition, closingCurlyBracketPosition + 1);\n\n        // Remove the metadata from the header\n        header = header.substring(0, openingCurlyBracketPosition) + header.substring(closingCurlyBracketPosition + 1);\n      }\n\n      // There was passage metadata\n      if (metadata.length > 0) {\n        // Try to parse the metadata\n        try {\n          metadata = JSON.parse(metadata);\n        } catch (event) {\n          this._passageMetadataError = true;\n        }\n      }\n\n      // Test for tags\n      const openingSquareBracketPosition = header.lastIndexOf('[');\n      const closingSquareBracketPosition = header.lastIndexOf(']');\n\n      if (openingSquareBracketPosition !== -1 && closingSquareBracketPosition !== -1) {\n        tags = header.slice(openingSquareBracketPosition, closingSquareBracketPosition + 1);\n\n        // Remove the tags from the header\n        header = header.substring(0, openingSquareBracketPosition) + header.substring(closingSquareBracketPosition + 1);\n      }\n\n      // Parse tags\n      if (tags.length > 0) {\n        // Eat the opening and closing square brackets\n        tags = tags.substring(1, tags.length - 1);\n\n        // Set empty default\n        let tagsArray = [];\n\n        // Test if tags is not single, empty string\n        if (!(tags === '')) {\n          tagsArray = tags.split(' ');\n        }\n\n        // There are multiple tags\n        if (tagsArray.length > 1) {\n        // Create future array\n          const futureTagArray = [];\n\n          // Move through entries\n          // Add a trimmed version into future array\n          tagsArray.forEach((tag) => { futureTagArray.push(tag.trim()); });\n\n          // Set the tags back to the future array\n          tags = futureTagArray;\n        } else if (tagsArray.length === 1) {\n        // There was only one tag\n        // Store it\n          const temp = tags;\n\n          // Switch tags over to an array\n          tags = [];\n          // Push the single entry\n          tags.push(temp);\n        } else {\n        // Make sure tags is set to empty array if no tags were found\n          tags = [];\n        }\n      } else {\n        // There were no tags, so set it to an empty array;\n        tags = [];\n      }\n\n      // Filter out any empty string tags\n      tags = tags.filter(tag => tag !== '');\n\n      // Trim any remaining whitespace\n      header = header.trim();\n\n      // Check if there is a name left\n      if (header.length > 0) {\n        name = header;\n      } else {\n        // No name left. Something went wrong. Blame user.\n        throw new Error('Malformed passage header!');\n      }\n\n      if (this._passageMetadataError) {\n        console.warn('Error parsing metadata for \"' + name + '\". It was ignored.');\n      }\n\n      // Add the new Passage to the internal array\n      passages.push(new Passage(name, tags, metadata, text, pid));\n\n      // Increase pid\n      pid++;\n    });\n\n    // All formats share StoryTitle\n    // Find it and set it\n    let pos = passages.find((el) => { return el.name === 'StoryTitle'; });\n\n    if (pos !== undefined) {\n      this.story.name = pos.text;\n      // Remove the StoryTitle passage\n      passages = passages.filter(p => p.name !== 'StoryTitle');\n    } else {\n    // There was no StoryTitle passage\n    // Set a value of \"Unknown\"\n      this.story.name = 'Unknown';\n    }\n\n    // Look for StoryData\n    pos = passages.find((el) => { return el.name === 'StoryData'; });\n\n    if (pos !== undefined) {\n    // Try to parse the StoryData\n      try {\n        this.story.metadata = JSON.parse(pos.text);\n      } catch (event) {\n        // Silently fail with default values\n        this._storydataError = true;\n      }\n\n      // Remove the StoryData passage\n      passages = passages.filter(p => p.name !== 'StoryData');\n    }\n\n    if (this._storydataError) {\n      console.warn('Error with processing StoryData JSON data. It was ignored.');\n    }\n\n    // Set the passages to the internal story\n    this.story.passages = passages;\n  }\n}\n\nmodule.exports = TweeParser;\n"]}]}