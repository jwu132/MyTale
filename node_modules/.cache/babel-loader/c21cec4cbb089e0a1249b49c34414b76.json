{"remainingRequest":"/Users/justinwu/Desktop/Gitlab_MyTale/mytale/node_modules/babel-loader/lib/index.js!/Users/justinwu/Desktop/Gitlab_MyTale/mytale/node_modules/eslint-loader/index.js??ref--13-0!/Users/justinwu/Desktop/Gitlab_MyTale/mytale/src/js/tiptap/packages/tiptap/src/Utils/ExtensionManager.js","dependencies":[{"path":"/Users/justinwu/Desktop/Gitlab_MyTale/mytale/src/js/tiptap/packages/tiptap/src/Utils/ExtensionManager.js","mtime":1604692362852},{"path":"/Users/justinwu/Desktop/Gitlab_MyTale/mytale/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/justinwu/Desktop/Gitlab_MyTale/mytale/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/justinwu/Desktop/Gitlab_MyTale/mytale/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/justinwu/Desktop/Gitlab_MyTale/mytale/src/js/tiptap/packages/tiptap/src/Utils/ExtensionManager.js"],"names":["keymap","ExtensionManager","extensions","editor","forEach","extension","bindEditor","init","schema","extensionKeymaps","filter","includes","type","keys","map","nodeMarkKeymaps","name","excludedExtensions","Array","allowedExtensions","extensionInputRules","inputRules","nodeMarkInputRules","reduce","allInputRules","extensionPasteRules","pasteRules","nodeMarkPasteRules","allPasteRules","view","commands","allCommands","value","apply","cb","attrs","editable","focus","state","dispatch","handle","_name","_value","isArray","callback","Object","entries","commandName","commandValue","nodes","Proxy","options","set","obj","prop","changed","assign","updateState","marks","plugins","allPlugins"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,SAASA,MAAT,QAAuB,oBAAvB;;IAEqBC,gB;AAEnB,8BAAqC;AAAA,QAAzBC,UAAyB,uEAAZ,EAAY;AAAA,QAARC,MAAQ;;AAAA;;AACnCD,IAAAA,UAAU,CAACE,OAAX,CAAmB,UAAAC,SAAS,EAAI;AAC9BA,MAAAA,SAAS,CAACC,UAAV,CAAqBH,MAArB;AACAE,MAAAA,SAAS,CAACE,IAAV;AACD,KAHD;AAIA,SAAKL,UAAL,GAAkBA,UAAlB;AACD;;;;kCAkDmB;AAAA,UAAVM,MAAU,QAAVA,MAAU;AAClB,UAAMC,gBAAgB,GAAG,KAAKP,UAAL,CACtBQ,MADsB,CACf,UAAAL,SAAS;AAAA,eAAI,CAAC,WAAD,EAAcM,QAAd,CAAuBN,SAAS,CAACO,IAAjC,CAAJ;AAAA,OADM,EAEtBF,MAFsB,CAEf,UAAAL,SAAS;AAAA,eAAIA,SAAS,CAACQ,IAAd;AAAA,OAFM,EAGtBC,GAHsB,CAGlB,UAAAT,SAAS;AAAA,eAAIA,SAAS,CAACQ,IAAV,CAAe;AAAEL,UAAAA,MAAM,EAANA;AAAF,SAAf,CAAJ;AAAA,OAHS,CAAzB;AAKA,UAAMO,eAAe,GAAG,KAAKb,UAAL,CACrBQ,MADqB,CACd,UAAAL,SAAS;AAAA,eAAI,CAAC,MAAD,EAAS,MAAT,EAAiBM,QAAjB,CAA0BN,SAAS,CAACO,IAApC,CAAJ;AAAA,OADK,EAErBF,MAFqB,CAEd,UAAAL,SAAS;AAAA,eAAIA,SAAS,CAACQ,IAAd;AAAA,OAFK,EAGrBC,GAHqB,CAGjB,UAAAT,SAAS;AAAA,eAAIA,SAAS,CAACQ,IAAV,CAAe;AAC/BD,UAAAA,IAAI,EAAEJ,MAAM,WAAIH,SAAS,CAACO,IAAd,OAAN,CAA6BP,SAAS,CAACW,IAAvC,CADyB;AAE/BR,UAAAA,MAAM,EAANA;AAF+B,SAAf,CAAJ;AAAA,OAHQ,CAAxB;AAQA,aAAO,6BACFC,gBADE,sBAEFM,eAFE,GAGLD,GAHK,CAGD,UAAAD,IAAI;AAAA,eAAIb,MAAM,CAACa,IAAD,CAAV;AAAA,OAHH,CAAP;AAID;;;sCAE0C;AAAA,UAA9BL,MAA8B,SAA9BA,MAA8B;AAAA,UAAtBS,kBAAsB,SAAtBA,kBAAsB;AACzC,UAAI,EAAEA,kBAAkB,YAAYC,KAAhC,KAA0CD,kBAA9C,EAAkE,OAAO,EAAP;AAElE,UAAME,iBAAiB,GAAIF,kBAAkB,YAAYC,KAA/B,GAAwC,KAAKhB,UAAL,CAC7DQ,MAD6D,CACtD,UAAAL,SAAS;AAAA,eAAI,CAACY,kBAAkB,CAACN,QAAnB,CAA4BN,SAAS,CAACW,IAAtC,CAAL;AAAA,OAD6C,CAAxC,GAC+C,KAAKd,UAD9E;AAGA,UAAMkB,mBAAmB,GAAGD,iBAAiB,CAC1CT,MADyB,CAClB,UAAAL,SAAS;AAAA,eAAI,CAAC,WAAD,EAAcM,QAAd,CAAuBN,SAAS,CAACO,IAAjC,CAAJ;AAAA,OADS,EAEzBF,MAFyB,CAElB,UAAAL,SAAS;AAAA,eAAIA,SAAS,CAACgB,UAAd;AAAA,OAFS,EAGzBP,GAHyB,CAGrB,UAAAT,SAAS;AAAA,eAAIA,SAAS,CAACgB,UAAV,CAAqB;AAAEb,UAAAA,MAAM,EAANA;AAAF,SAArB,CAAJ;AAAA,OAHY,CAA5B;AAKA,UAAMc,kBAAkB,GAAGH,iBAAiB,CACzCT,MADwB,CACjB,UAAAL,SAAS;AAAA,eAAI,CAAC,MAAD,EAAS,MAAT,EAAiBM,QAAjB,CAA0BN,SAAS,CAACO,IAApC,CAAJ;AAAA,OADQ,EAExBF,MAFwB,CAEjB,UAAAL,SAAS;AAAA,eAAIA,SAAS,CAACgB,UAAd;AAAA,OAFQ,EAGxBP,GAHwB,CAGpB,UAAAT,SAAS;AAAA,eAAIA,SAAS,CAACgB,UAAV,CAAqB;AACrCT,UAAAA,IAAI,EAAEJ,MAAM,WAAIH,SAAS,CAACO,IAAd,OAAN,CAA6BP,SAAS,CAACW,IAAvC,CAD+B;AAErCR,UAAAA,MAAM,EAANA;AAFqC,SAArB,CAAJ;AAAA,OAHW,CAA3B;AAQA,aAAO,6BACFY,mBADE,sBAEFE,kBAFE,GAGLC,MAHK,CAGE,UAACC,aAAD,EAAgBH,UAAhB;AAAA,4CACJG,aADI,sBAEJH,UAFI;AAAA,OAHF,EAMH,EANG,CAAP;AAOD;;;sCAE0C;AAAA,UAA9Bb,MAA8B,SAA9BA,MAA8B;AAAA,UAAtBS,kBAAsB,SAAtBA,kBAAsB;AACzC,UAAI,EAAEA,kBAAkB,YAAYC,KAAhC,KAA0CD,kBAA9C,EAAkE,OAAO,EAAP;AAElE,UAAME,iBAAiB,GAAIF,kBAAkB,YAAYC,KAA/B,GAAwC,KAAKhB,UAAL,CAC7DQ,MAD6D,CACtD,UAAAL,SAAS;AAAA,eAAI,CAACY,kBAAkB,CAACN,QAAnB,CAA4BN,SAAS,CAACW,IAAtC,CAAL;AAAA,OAD6C,CAAxC,GAC+C,KAAKd,UAD9E;AAGA,UAAMuB,mBAAmB,GAAGN,iBAAiB,CAC1CT,MADyB,CAClB,UAAAL,SAAS;AAAA,eAAI,CAAC,WAAD,EAAcM,QAAd,CAAuBN,SAAS,CAACO,IAAjC,CAAJ;AAAA,OADS,EAEzBF,MAFyB,CAElB,UAAAL,SAAS;AAAA,eAAIA,SAAS,CAACqB,UAAd;AAAA,OAFS,EAGzBZ,GAHyB,CAGrB,UAAAT,SAAS;AAAA,eAAIA,SAAS,CAACqB,UAAV,CAAqB;AAAElB,UAAAA,MAAM,EAANA;AAAF,SAArB,CAAJ;AAAA,OAHY,CAA5B;AAKA,UAAMmB,kBAAkB,GAAGR,iBAAiB,CACzCT,MADwB,CACjB,UAAAL,SAAS;AAAA,eAAI,CAAC,MAAD,EAAS,MAAT,EAAiBM,QAAjB,CAA0BN,SAAS,CAACO,IAApC,CAAJ;AAAA,OADQ,EAExBF,MAFwB,CAEjB,UAAAL,SAAS;AAAA,eAAIA,SAAS,CAACqB,UAAd;AAAA,OAFQ,EAGxBZ,GAHwB,CAGpB,UAAAT,SAAS;AAAA,eAAIA,SAAS,CAACqB,UAAV,CAAqB;AACrCd,UAAAA,IAAI,EAAEJ,MAAM,WAAIH,SAAS,CAACO,IAAd,OAAN,CAA6BP,SAAS,CAACW,IAAvC,CAD+B;AAErCR,UAAAA,MAAM,EAANA;AAFqC,SAArB,CAAJ;AAAA,OAHW,CAA3B;AAQA,aAAO,6BACFiB,mBADE,sBAEFE,kBAFE,GAGLJ,MAHK,CAGE,UAACK,aAAD,EAAgBF,UAAhB;AAAA,4CACJE,aADI,sBAEJF,UAFI;AAAA,OAHF,EAMH,EANG,CAAP;AAOD;;;oCAE0B;AAAA,UAAhBlB,MAAgB,SAAhBA,MAAgB;AAAA,UAARqB,IAAQ,SAARA,IAAQ;AAEzB,aAAO,KAAK3B,UAAL,CACJQ,MADI,CACG,UAAAL,SAAS;AAAA,eAAIA,SAAS,CAACyB,QAAd;AAAA,OADZ,EAEJP,MAFI,CAEG,UAACQ,WAAD,EAAc1B,SAAd,EAA4B;AAAA,YAC1BW,IAD0B,GACXX,SADW,CAC1BW,IAD0B;AAAA,YACpBJ,IADoB,GACXP,SADW,CACpBO,IADoB;AAElC,YAAMkB,QAAQ,GAAG,EAAjB;AACA,YAAME,KAAK,GAAG3B,SAAS,CAACyB,QAAV;AACZtB,UAAAA,MAAM,EAANA;AADY,WAET,CAAC,MAAD,EAAS,MAAT,EAAiBG,QAAjB,CAA0BC,IAA1B,IAAkC;AACnCA,UAAAA,IAAI,EAAEJ,MAAM,WAAII,IAAJ,OAAN,CAAmBI,IAAnB;AAD6B,SAAlC,GAEC,EAJQ,EAAd;;AAOA,YAAMiB,KAAK,GAAG,SAARA,KAAQ,CAACC,EAAD,EAAKC,KAAL,EAAe;AAC3B,cAAI,CAACN,IAAI,CAACO,QAAV,EAAoB;AAClB,mBAAO,KAAP;AACD;;AACDP,UAAAA,IAAI,CAACQ,KAAL;AACA,iBAAOH,EAAE,CAACC,KAAD,CAAF,CAAUN,IAAI,CAACS,KAAf,EAAsBT,IAAI,CAACU,QAA3B,EAAqCV,IAArC,CAAP;AACD,SAND;;AAQA,YAAMW,MAAM,GAAG,SAATA,MAAS,CAACC,KAAD,EAAQC,MAAR,EAAmB;AAChC,cAAIxB,KAAK,CAACyB,OAAN,CAAcD,MAAd,CAAJ,EAA2B;AACzBZ,YAAAA,QAAQ,CAACW,KAAD,CAAR,GAAkB,UAAAN,KAAK;AAAA,qBAAIO,MAAM,CAACtC,OAAP,CAAe,UAAAwC,QAAQ;AAAA,uBAAIX,KAAK,CAACW,QAAD,EAAWT,KAAX,CAAT;AAAA,eAAvB,CAAJ;AAAA,aAAvB;AACD,WAFD,MAEO,IAAI,OAAOO,MAAP,KAAkB,UAAtB,EAAkC;AACvCZ,YAAAA,QAAQ,CAACW,KAAD,CAAR,GAAkB,UAAAN,KAAK;AAAA,qBAAIF,KAAK,CAACS,MAAD,EAASP,KAAT,CAAT;AAAA,aAAvB;AACD;AACF,SAND;;AAQA,YAAI,QAAOH,KAAP,MAAiB,QAArB,EAA+B;AAC7Ba,UAAAA,MAAM,CAACC,OAAP,CAAed,KAAf,EAAsB5B,OAAtB,CAA8B,iBAAiC;AAAA;AAAA,gBAA/B2C,WAA+B;AAAA,gBAAlBC,YAAkB;;AAC7DR,YAAAA,MAAM,CAACO,WAAD,EAAcC,YAAd,CAAN;AACD,WAFD;AAGD,SAJD,MAIO;AACLR,UAAAA,MAAM,CAACxB,IAAD,EAAOgB,KAAP,CAAN;AACD;;AAED,+CACKD,WADL,GAEKD,QAFL;AAID,OAxCI,EAwCF,EAxCE,CAAP;AAyCD;;;wBAvKW;AACV,aAAO,KAAK5B,UAAL,CACJQ,MADI,CACG,UAAAL,SAAS;AAAA,eAAIA,SAAS,CAACO,IAAV,KAAmB,MAAvB;AAAA,OADZ,EAEJW,MAFI,CAEG,UAAC0B,KAAD;AAAA,YAAUjC,IAAV,SAAUA,IAAV;AAAA,YAAgBR,MAAhB,SAAgBA,MAAhB;AAAA,+CACHyC,KADG,2BAELjC,IAFK,EAEER,MAFF;AAAA,OAFH,EAKD,EALC,CAAP;AAMD;;;wBAEa;AAAA,UACJqB,IADI,GACK,IADL,CACJA,IADI;AAEZ,aAAO,KAAK3B,UAAL,CACFqB,MADE,CACK,UAAC0B,KAAD,EAAQ5C,SAAR;AAAA,+CACH4C,KADG,2BAEL5C,SAAS,CAACW,IAFL,EAEY,IAAIkC,KAAJ,CAAU7C,SAAS,CAAC8C,OAApB,EAA6B;AAC7CC,UAAAA,GAD6C,eACzCC,GADyC,EACpCC,IADoC,EAC9BtB,KAD8B,EACvB;AACpB,gBAAMuB,OAAO,GAAIF,GAAG,CAACC,IAAD,CAAH,KAActB,KAA/B;AAEAa,YAAAA,MAAM,CAACW,MAAP,CAAcH,GAAd,sBAAsBC,IAAtB,EAA6BtB,KAA7B;;AAEA,gBAAIuB,OAAJ,EAAa;AACX1B,cAAAA,IAAI,CAAC4B,WAAL,CAAiB5B,IAAI,CAACS,KAAtB;AACD;;AAED,mBAAO,IAAP;AACD;AAX4C,SAA7B,CAFZ;AAAA,OADL,EAgBC,EAhBD,CAAP;AAiBD;;;wBAEW;AACV,aAAO,KAAKpC,UAAL,CACJQ,MADI,CACG,UAAAL,SAAS;AAAA,eAAIA,SAAS,CAACO,IAAV,KAAmB,MAAvB;AAAA,OADZ,EAEJW,MAFI,CAEG,UAACmC,KAAD;AAAA,YAAU1C,IAAV,SAAUA,IAAV;AAAA,YAAgBR,MAAhB,SAAgBA,MAAhB;AAAA,+CACHkD,KADG,2BAEL1C,IAFK,EAEER,MAFF;AAAA,OAFH,EAKD,EALC,CAAP;AAMD;;;wBAEa;AACZ,aAAO,KAAKN,UAAL,CACJQ,MADI,CACG,UAAAL,SAAS;AAAA,eAAIA,SAAS,CAACsD,OAAd;AAAA,OADZ,EAEJpC,MAFI,CAEG,UAACqC,UAAD;AAAA,YAAeD,OAAf,SAAeA,OAAf;AAAA,4CACHC,UADG,sBAEHD,OAFG;AAAA,OAFH,EAKD,EALC,CAAP;AAMD;;;;;;SAxDkB1D,gB","sourcesContent":["import { keymap } from 'prosemirror-keymap'\n\nexport default class ExtensionManager {\n\n  constructor(extensions = [], editor) {\n    extensions.forEach(extension => {\n      extension.bindEditor(editor)\n      extension.init()\n    })\n    this.extensions = extensions\n  }\n\n  get nodes() {\n    return this.extensions\n      .filter(extension => extension.type === 'node')\n      .reduce((nodes, { name, schema }) => ({\n        ...nodes,\n        [name]: schema,\n      }), {})\n  }\n\n  get options() {\n    const { view } = this\n    return this.extensions\n        .reduce((nodes, extension) => ({\n          ...nodes,\n          [extension.name]: new Proxy(extension.options, {\n            set(obj, prop, value) {\n              const changed = (obj[prop] !== value)\n\n              Object.assign(obj, { [prop]: value })\n\n              if (changed) {\n                view.updateState(view.state)\n              }\n\n              return true\n            },\n          }),\n        }), {})\n  }\n\n  get marks() {\n    return this.extensions\n      .filter(extension => extension.type === 'mark')\n      .reduce((marks, { name, schema }) => ({\n        ...marks,\n        [name]: schema,\n      }), {})\n  }\n\n  get plugins() {\n    return this.extensions\n      .filter(extension => extension.plugins)\n      .reduce((allPlugins, { plugins }) => ([\n        ...allPlugins,\n        ...plugins,\n      ]), [])\n  }\n\n  keymaps({ schema }) {\n    const extensionKeymaps = this.extensions\n      .filter(extension => ['extension'].includes(extension.type))\n      .filter(extension => extension.keys)\n      .map(extension => extension.keys({ schema }))\n\n    const nodeMarkKeymaps = this.extensions\n      .filter(extension => ['node', 'mark'].includes(extension.type))\n      .filter(extension => extension.keys)\n      .map(extension => extension.keys({\n        type: schema[`${extension.type}s`][extension.name],\n        schema,\n      }))\n\n    return [\n      ...extensionKeymaps,\n      ...nodeMarkKeymaps,\n    ].map(keys => keymap(keys))\n  }\n\n  inputRules({ schema, excludedExtensions }) {\n    if (!(excludedExtensions instanceof Array) && excludedExtensions) return []\n\n    const allowedExtensions = (excludedExtensions instanceof Array) ? this.extensions\n        .filter(extension => !excludedExtensions.includes(extension.name)) : this.extensions\n\n    const extensionInputRules = allowedExtensions\n      .filter(extension => ['extension'].includes(extension.type))\n      .filter(extension => extension.inputRules)\n      .map(extension => extension.inputRules({ schema }))\n\n    const nodeMarkInputRules = allowedExtensions\n      .filter(extension => ['node', 'mark'].includes(extension.type))\n      .filter(extension => extension.inputRules)\n      .map(extension => extension.inputRules({\n        type: schema[`${extension.type}s`][extension.name],\n        schema,\n      }))\n\n    return [\n      ...extensionInputRules,\n      ...nodeMarkInputRules,\n    ].reduce((allInputRules, inputRules) => ([\n      ...allInputRules,\n      ...inputRules,\n    ]), [])\n  }\n\n  pasteRules({ schema, excludedExtensions }) {\n    if (!(excludedExtensions instanceof Array) && excludedExtensions) return []\n\n    const allowedExtensions = (excludedExtensions instanceof Array) ? this.extensions\n        .filter(extension => !excludedExtensions.includes(extension.name)) : this.extensions\n\n    const extensionPasteRules = allowedExtensions\n      .filter(extension => ['extension'].includes(extension.type))\n      .filter(extension => extension.pasteRules)\n      .map(extension => extension.pasteRules({ schema }))\n\n    const nodeMarkPasteRules = allowedExtensions\n      .filter(extension => ['node', 'mark'].includes(extension.type))\n      .filter(extension => extension.pasteRules)\n      .map(extension => extension.pasteRules({\n        type: schema[`${extension.type}s`][extension.name],\n        schema,\n      }))\n\n    return [\n      ...extensionPasteRules,\n      ...nodeMarkPasteRules,\n    ].reduce((allPasteRules, pasteRules) => ([\n      ...allPasteRules,\n      ...pasteRules,\n    ]), [])\n  }\n\n  commands({ schema, view }) {\n\n    return this.extensions\n      .filter(extension => extension.commands)\n      .reduce((allCommands, extension) => {\n        const { name, type } = extension\n        const commands = {}\n        const value = extension.commands({\n          schema,\n          ...['node', 'mark'].includes(type) ? {\n            type: schema[`${type}s`][name],\n          } : {},\n        })\n\n        const apply = (cb, attrs) => {\n          if (!view.editable) {\n            return false\n          }\n          view.focus()\n          return cb(attrs)(view.state, view.dispatch, view)\n        }\n\n        const handle = (_name, _value) => {\n          if (Array.isArray(_value)) {\n            commands[_name] = attrs => _value.forEach(callback => apply(callback, attrs))\n          } else if (typeof _value === 'function') {\n            commands[_name] = attrs => apply(_value, attrs)\n          }\n        }\n\n        if (typeof value === 'object') {\n          Object.entries(value).forEach(([commandName, commandValue]) => {\n            handle(commandName, commandValue)\n          })\n        } else {\n          handle(name, value)\n        }\n\n        return {\n          ...allCommands,\n          ...commands,\n        }\n      }, {})\n  }\n\n}\n"]}]}