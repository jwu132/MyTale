{"remainingRequest":"/Users/justinwu/Desktop/Gitlab_MyTale/mytale/node_modules/babel-loader/lib/index.js!/Users/justinwu/Desktop/Gitlab_MyTale/mytale/node_modules/eslint-loader/index.js??ref--13-0!/Users/justinwu/Desktop/Gitlab_MyTale/mytale/src/js/tiptap/packages/tiptap-extensions/src/nodes/Blockquote.js","dependencies":[{"path":"/Users/justinwu/Desktop/Gitlab_MyTale/mytale/src/js/tiptap/packages/tiptap-extensions/src/nodes/Blockquote.js","mtime":1604692362847},{"path":"/Users/justinwu/Desktop/Gitlab_MyTale/mytale/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/justinwu/Desktop/Gitlab_MyTale/mytale/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/justinwu/Desktop/Gitlab_MyTale/mytale/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICIvVXNlcnMvanVzdGlud3UvRGVza3RvcC9HaXRsYWJfTXlUYWxlL215dGFsZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2siOwppbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gIi9Vc2Vycy9qdXN0aW53dS9EZXNrdG9wL0dpdGxhYl9NeVRhbGUvbXl0YWxlL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcyI7CmltcG9ydCBfaW5oZXJpdHMgZnJvbSAiL1VzZXJzL2p1c3Rpbnd1L0Rlc2t0b3AvR2l0bGFiX015VGFsZS9teXRhbGUvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzIjsKaW1wb3J0IF9jcmVhdGVTdXBlciBmcm9tICIvVXNlcnMvanVzdGlud3UvRGVza3RvcC9HaXRsYWJfTXlUYWxlL215dGFsZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlU3VwZXIiOwppbXBvcnQgeyBOb2RlIH0gZnJvbSAndGlwdGFwJzsKaW1wb3J0IHsgd3JhcHBpbmdJbnB1dFJ1bGUsIHRvZ2dsZVdyYXAgfSBmcm9tICd0aXB0YXAtY29tbWFuZHMnOwoKdmFyIEJsb2NrcXVvdGUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Ob2RlKSB7CiAgX2luaGVyaXRzKEJsb2NrcXVvdGUsIF9Ob2RlKTsKCiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihCbG9ja3F1b3RlKTsKCiAgZnVuY3Rpb24gQmxvY2txdW90ZSgpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCbG9ja3F1b3RlKTsKCiAgICByZXR1cm4gX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoQmxvY2txdW90ZSwgW3sKICAgIGtleTogImNvbW1hbmRzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjb21tYW5kcyhfcmVmKSB7CiAgICAgIHZhciB0eXBlID0gX3JlZi50eXBlLAogICAgICAgICAgc2NoZW1hID0gX3JlZi5zY2hlbWE7CiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIHRvZ2dsZVdyYXAodHlwZSwgc2NoZW1hLm5vZGVzLnBhcmFncmFwaCk7CiAgICAgIH07CiAgICB9CiAgfSwgewogICAga2V5OiAia2V5cyIsCiAgICB2YWx1ZTogZnVuY3Rpb24ga2V5cyhfcmVmMikgewogICAgICB2YXIgdHlwZSA9IF9yZWYyLnR5cGU7CiAgICAgIHJldHVybiB7CiAgICAgICAgJ0N0cmwtPic6IHRvZ2dsZVdyYXAodHlwZSkKICAgICAgfTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJpbnB1dFJ1bGVzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBpbnB1dFJ1bGVzKF9yZWYzKSB7CiAgICAgIHZhciB0eXBlID0gX3JlZjMudHlwZTsKICAgICAgcmV0dXJuIFt3cmFwcGluZ0lucHV0UnVsZSgvXlxzKj5ccyQvLCB0eXBlKV07CiAgICB9CiAgfSwgewogICAga2V5OiAibmFtZSIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuICdibG9ja3F1b3RlJzsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJzY2hlbWEiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgY29udGVudDogJ2Jsb2NrKicsCiAgICAgICAgZ3JvdXA6ICdibG9jaycsCiAgICAgICAgZGVmaW5pbmc6IHRydWUsCiAgICAgICAgZHJhZ2dhYmxlOiBmYWxzZSwKICAgICAgICBwYXJzZURPTTogW3sKICAgICAgICAgIHRhZzogJ2Jsb2NrcXVvdGUnCiAgICAgICAgfV0sCiAgICAgICAgdG9ET006IGZ1bmN0aW9uIHRvRE9NKCkgewogICAgICAgICAgcmV0dXJuIFsnYmxvY2txdW90ZScsIDBdOwogICAgICAgIH0KICAgICAgfTsKICAgIH0KICB9XSk7CgogIHJldHVybiBCbG9ja3F1b3RlOwp9KE5vZGUpOwoKZXhwb3J0IHsgQmxvY2txdW90ZSBhcyBkZWZhdWx0IH07"},{"version":3,"sources":["/Users/justinwu/Desktop/Gitlab_MyTale/mytale/src/js/tiptap/packages/tiptap-extensions/src/nodes/Blockquote.js"],"names":["Node","wrappingInputRule","toggleWrap","Blockquote","type","schema","nodes","paragraph","content","group","defining","draggable","parseDOM","tag","toDOM"],"mappings":";;;;AAAA,SAASA,IAAT,QAAqB,QAArB;AACA,SAASC,iBAAT,EAA4BC,UAA5B,QAA8C,iBAA9C;;IAEqBC,U;;;;;;;;;;;;;mCAmBQ;AAAA,UAAhBC,IAAgB,QAAhBA,IAAgB;AAAA,UAAVC,MAAU,QAAVA,MAAU;AACzB,aAAO;AAAA,eAAMH,UAAU,CAACE,IAAD,EAAOC,MAAM,CAACC,KAAP,CAAaC,SAApB,CAAhB;AAAA,OAAP;AACD;;;gCAEc;AAAA,UAARH,IAAQ,SAARA,IAAQ;AACb,aAAO;AACL,kBAAUF,UAAU,CAACE,IAAD;AADf,OAAP;AAGD;;;sCAEoB;AAAA,UAARA,IAAQ,SAARA,IAAQ;AACnB,aAAO,CACLH,iBAAiB,CAAC,UAAD,EAAaG,IAAb,CADZ,CAAP;AAGD;;;wBA/BU;AACT,aAAO,YAAP;AACD;;;wBAEY;AACX,aAAO;AACLI,QAAAA,OAAO,EAAE,QADJ;AAELC,QAAAA,KAAK,EAAE,OAFF;AAGLC,QAAAA,QAAQ,EAAE,IAHL;AAILC,QAAAA,SAAS,EAAE,KAJN;AAKLC,QAAAA,QAAQ,EAAE,CACR;AAAEC,UAAAA,GAAG,EAAE;AAAP,SADQ,CALL;AAQLC,QAAAA,KAAK,EAAE;AAAA,iBAAM,CAAC,YAAD,EAAe,CAAf,CAAN;AAAA;AARF,OAAP;AAUD;;;;EAjBqCd,I;;SAAnBG,U","sourcesContent":["import { Node } from 'tiptap'\nimport { wrappingInputRule, toggleWrap } from 'tiptap-commands'\n\nexport default class Blockquote extends Node {\n\n  get name() {\n    return 'blockquote'\n  }\n\n  get schema() {\n    return {\n      content: 'block*',\n      group: 'block',\n      defining: true,\n      draggable: false,\n      parseDOM: [\n        { tag: 'blockquote' },\n      ],\n      toDOM: () => ['blockquote', 0],\n    }\n  }\n\n  commands({ type, schema }) {\n    return () => toggleWrap(type, schema.nodes.paragraph)\n  }\n\n  keys({ type }) {\n    return {\n      'Ctrl->': toggleWrap(type),\n    }\n  }\n\n  inputRules({ type }) {\n    return [\n      wrappingInputRule(/^\\s*>\\s$/, type),\n    ]\n  }\n\n}\n"]}]}