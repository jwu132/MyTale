{"version":3,"sources":["Typesense/Keys.js"],"names":["RESOURCEPATH","Keys","apiCall","_apiCall","params","post","get","searchKey","parameters","paramsJSON","JSON","stringify","digest","Buffer","from","update","keyPrefix","substr","rawScopedKey","toString"],"mappings":"AAAA;;;;;;;;;;;;;AAEA;;AAEA,IAAMA,YAAY,GAAG,OAArB;;IAEqBC,I;AACnB,gBAAaC,OAAb,EAAsB;AAAA;AACpB,SAAKC,QAAL,GAAgBD,OAAhB;AACD;;;;2BAEOE,M,EAAQ;AACd,aAAO,KAAKD,QAAL,CAAcE,IAAd,CAAmBJ,IAAI,CAACD,YAAxB,EAAsCI,MAAtC,CAAP;AACD;;;+BAEW;AACV,aAAO,KAAKD,QAAL,CAAcG,GAAd,CAAkBN,YAAlB,CAAP;AACD;;;4CAEwBO,S,EAAWC,U,EAAY;AAC9C;AACA;AACA,UAAMC,UAAU,GAAGC,IAAI,CAACC,SAAL,CAAeH,UAAf,CAAnB;AACA,UAAMI,MAAM,GAAGC,MAAM,CAACC,IAAP,CACb,wBAAW,QAAX,EAAqBP,SAArB,EACGQ,MADH,CACUN,UADV,EAEGG,MAFH,CAEU,QAFV,CADa,CAAf;AAIA,UAAMI,SAAS,GAAGT,SAAS,CAACU,MAAV,CAAiB,CAAjB,EAAoB,CAApB,CAAlB;AACA,UAAMC,YAAY,aAAMN,MAAN,SAAeI,SAAf,SAA2BP,UAA3B,CAAlB;AAEA,aAAOI,MAAM,CAACC,IAAP,CAAYI,YAAZ,EAA0BC,QAA1B,CAAmC,QAAnC,CAAP;AACD;;;wBAE0B;AACzB,aAAOnB,YAAP;AACD","sourcesContent":["'use strict'\n\nimport { createHmac } from 'crypto'\n\nconst RESOURCEPATH = '/keys'\n\nexport default class Keys {\n  constructor (apiCall) {\n    this._apiCall = apiCall\n  }\n\n  create (params) {\n    return this._apiCall.post(Keys.RESOURCEPATH, params)\n  }\n\n  retrieve () {\n    return this._apiCall.get(RESOURCEPATH)\n  }\n\n  generateScopedSearchKey (searchKey, parameters) {\n    // Note: only a key generated with the `documents:search` action will be\n    // accepted by the server, when usined with the search endpoint.\n    const paramsJSON = JSON.stringify(parameters)\n    const digest = Buffer.from(\n      createHmac('sha256', searchKey)\n        .update(paramsJSON)\n        .digest('base64'))\n    const keyPrefix = searchKey.substr(0, 4)\n    const rawScopedKey = `${digest}${keyPrefix}${paramsJSON}`\n\n    return Buffer.from(rawScopedKey).toString('base64')\n  }\n\n  static get RESOURCEPATH () {\n    return RESOURCEPATH\n  }\n}\n"],"file":"Keys.js"}